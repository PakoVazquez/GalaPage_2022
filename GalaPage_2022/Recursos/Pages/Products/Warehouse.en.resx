<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="attrOrders01" xml:space="preserve">
    <value>Receives Orders from Branches</value>
  </data>
  <data name="attrOrders02" xml:space="preserve">
    <value>Before processing the Orders, you can adjust them according to your needs</value>
  </data>
  <data name="attrOrders03" xml:space="preserve">
    <value>Receive merchandise transfers from branches</value>
  </data>
  <data name="attrOrders04" xml:space="preserve">
    <value>Identify who sends you the return of the products</value>
  </data>
  <data name="attrOrders05" xml:space="preserve">
    <value>Check the stock of the Branches from the Warehouse</value>
  </data>
  <data name="attrRawMaterial01" xml:space="preserve">
    <value>Register the warehouses you need: Shrinkage Warehouse, Kitchen Warehouse</value>
  </data>
  <data name="attrRawMaterial02" xml:space="preserve">
    <value>Make the transfers of Raw Materials to the different warehouses, as appropriate.</value>
  </data>
  <data name="attrRawMaterial03" xml:space="preserve">
    <value>For the Kitchen Warehouse, generate the Productions that report to you, to convert the recipes into finished products</value>
  </data>
  <data name="attrRawMaterial04" xml:space="preserve">
    <value>Take control of finished products that you can send to your branches.</value>
  </data>
  <data name="attrRawMaterial05" xml:space="preserve">
    <value>Monitor the report of entries in the Mermas warehouse.</value>
  </data>
  <data name="attrWarehouseForecasts01" xml:space="preserve">
    <value>Shopping Forecasts</value>
  </data>
  <data name="attrWarehouseForecasts02" xml:space="preserve">
    <value>Sales Forecasts</value>
  </data>
  <data name="attrWarehouseInventories01" xml:space="preserve">
    <value>Daily Inventories</value>
  </data>
  <data name="attrWarehouseInventories02" xml:space="preserve">
    <value>Weekly Inventories</value>
  </data>
  <data name="attrWarehouseInventories03" xml:space="preserve">
    <value>Monthly Inventories</value>
  </data>
  <data name="attrWarehouseInventories04" xml:space="preserve">
    <value>Sending results by email</value>
  </data>
  <data name="attrWarehouseInventories05" xml:space="preserve">
    <value>Different permissions, to configure user roles</value>
  </data>
  <data name="attrWarehouseInventories06" xml:space="preserve">
    <value>Inventories for each Sub Warehouse</value>
  </data>
  <data name="attrWarehousePermissions01" xml:space="preserve">
    <value>Assign only the permissions the user needs</value>
  </data>
  <data name="attrWarehousePermissions02" xml:space="preserve">
    <value>For each User you need to assign the permissions it needs</value>
  </data>
  <data name="attrWarehousePermissions03" xml:space="preserve">
    <value>The whole system is under permissions.</value>
  </data>
  <data name="attrWarehouseProcess01" xml:space="preserve">
    <value>Production</value>
  </data>
  <data name="attrWarehouseProcess02" xml:space="preserve">
    <value>Purchase Orders</value>
  </data>
  <data name="attrWarehouseProcess03" xml:space="preserve">
    <value>Recipes for Processed Products</value>
  </data>
  <data name="attrWarehouseProcess04" xml:space="preserve">
    <value>Two types of Costing</value>
  </data>
  <data name="attrWarehouseProcess05" xml:space="preserve">
    <value>Generate SAT Consignment Letter</value>
  </data>
  <data name="btnAdviseYou" xml:space="preserve">
    <value>We can advise you</value>
  </data>
  <data name="btnContact" xml:space="preserve">
    <value>Ask for more information</value>
  </data>
  <data name="Header11" xml:space="preserve">
    <value>Distribution Center Administrator System</value>
  </data>
  <data name="Header20" xml:space="preserve">
    <value>Make Better Use of Your Raw Materials</value>
  </data>
  <data name="Header21" xml:space="preserve">
    <value>Take advantage of the different warehouses that you can have</value>
  </data>
  <data name="Header30" xml:space="preserve">
    <value>Your Warehouse in the Cloud</value>
  </data>
  <data name="Header31" xml:space="preserve">
    <value>Take advantage of Technology</value>
  </data>
  <data name="Header40" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="Header41" xml:space="preserve">
    <value>Receive orders from branches</value>
  </data>
  <data name="HeaderWarehouseCard01" xml:space="preserve">
    <value>Forecasts</value>
  </data>
  <data name="HeaderWarehouseCard02" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="HeaderWarehouseCard03" xml:space="preserve">
    <value>Inventories</value>
  </data>
  <data name="HeaderWarehouseCard04" xml:space="preserve">
    <value>Processes</value>
  </data>
  <data name="priceWarehouse" xml:space="preserve">
    <value>Monthly rent for only: </value>
  </data>
  <data name="txtCloudWaregouse" xml:space="preserve">
    <value>Access your warehouse from anywhere, so you can configure what you need and get the information you want at any time</value>
  </data>
  <data name="txtOrders" xml:space="preserve">
    <value>You can receive both Orders, such as Transfers, Returns from the branches, to control each movement as required.</value>
  </data>
  <data name="txtRawMaterial01" xml:space="preserve">
    <value>With Amigo Almacén you can keep track of Shrinkage and/or Production that allows you to save on Raw Materials, reducing a possible 10% or 12% shrinkage to 1.5 or 2% as a standard allowed.</value>
  </data>
  <data name="txtRawMaterial02" xml:space="preserve">
    <value>You can follow these recommendations to achieve the objectives</value>
  </data>
  <data name="txtWarehouse01" xml:space="preserve">
    <value>With Amigo Almacén, you can take control of your Distribution Center, Inventories, Production, Shipment of Merchandise, Orders and Routes.</value>
  </data>
  <data name="txtWarehouse02" xml:space="preserve">
    <value>Connect and perform different necessary tasks that simplify the work between the Warehouse and the Branches.</value>
  </data>
  <data name="txtWarehouseCard01" xml:space="preserve">
    <value>Statistical Tools for Warehouse</value>
  </data>
  <data name="txtWarehouseCard02" xml:space="preserve">
    <value>The Amigo Almacén System is managed under permissions for each user.</value>
  </data>
  <data name="txtWarehouseCard03" xml:space="preserve">
    <value>Dynamic and configurable inventory control.</value>
  </data>
  <data name="txtWarehouseCard04" xml:space="preserve">
    <value>Different processes to improve resource control</value>
  </data>
</root>